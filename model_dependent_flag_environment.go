/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// DependentFlagEnvironment struct for DependentFlagEnvironment
type DependentFlagEnvironment struct {
	Name *string `json:"name,omitempty"`
	Key *string `json:"key,omitempty"`
	Links *map[string]InlineResponse200 `json:"_links,omitempty"`
	Site *CoreLink `json:"_site,omitempty"`
}

// NewDependentFlagEnvironment instantiates a new DependentFlagEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependentFlagEnvironment() *DependentFlagEnvironment {
	this := DependentFlagEnvironment{}
	return &this
}

// NewDependentFlagEnvironmentWithDefaults instantiates a new DependentFlagEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependentFlagEnvironmentWithDefaults() *DependentFlagEnvironment {
	this := DependentFlagEnvironment{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DependentFlagEnvironment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagEnvironment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DependentFlagEnvironment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DependentFlagEnvironment) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DependentFlagEnvironment) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagEnvironment) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DependentFlagEnvironment) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DependentFlagEnvironment) SetKey(v string) {
	o.Key = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DependentFlagEnvironment) GetLinks() map[string]InlineResponse200 {
	if o == nil || o.Links == nil {
		var ret map[string]InlineResponse200
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagEnvironment) GetLinksOk() (*map[string]InlineResponse200, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DependentFlagEnvironment) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]InlineResponse200 and assigns it to the Links field.
func (o *DependentFlagEnvironment) SetLinks(v map[string]InlineResponse200) {
	o.Links = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *DependentFlagEnvironment) GetSite() CoreLink {
	if o == nil || o.Site == nil {
		var ret CoreLink
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagEnvironment) GetSiteOk() (*CoreLink, bool) {
	if o == nil || o.Site == nil {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *DependentFlagEnvironment) HasSite() bool {
	if o != nil && o.Site != nil {
		return true
	}

	return false
}

// SetSite gets a reference to the given CoreLink and assigns it to the Site field.
func (o *DependentFlagEnvironment) SetSite(v CoreLink) {
	o.Site = &v
}

func (o DependentFlagEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	if o.Site != nil {
		toSerialize["_site"] = o.Site
	}
	return json.Marshal(toSerialize)
}

type NullableDependentFlagEnvironment struct {
	value *DependentFlagEnvironment
	isSet bool
}

func (v NullableDependentFlagEnvironment) Get() *DependentFlagEnvironment {
	return v.value
}

func (v *NullableDependentFlagEnvironment) Set(val *DependentFlagEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableDependentFlagEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableDependentFlagEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependentFlagEnvironment(val *DependentFlagEnvironment) *NullableDependentFlagEnvironment {
	return &NullableDependentFlagEnvironment{value: val, isSet: true}
}

func (v NullableDependentFlagEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependentFlagEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


