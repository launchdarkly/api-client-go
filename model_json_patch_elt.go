/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// JSONPatchElt struct for JSONPatchElt
type JSONPatchElt struct {
	// The type of operation to perform
	Op *string `json:"op,omitempty"`
	// A JSON Pointer string specifying the part of the document to operate on
	Path *string `json:"path,omitempty"`
	// A JSON value used in \"add\", \"replace\", and \"test\" operations
	Value interface{} `json:"value,omitempty"`
}

// NewJSONPatchElt instantiates a new JSONPatchElt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONPatchElt() *JSONPatchElt {
	this := JSONPatchElt{}
	return &this
}

// NewJSONPatchEltWithDefaults instantiates a new JSONPatchElt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONPatchEltWithDefaults() *JSONPatchElt {
	this := JSONPatchElt{}
	return &this
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *JSONPatchElt) GetOp() string {
	if o == nil || o.Op == nil {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONPatchElt) GetOpOk() (*string, bool) {
	if o == nil || o.Op == nil {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *JSONPatchElt) HasOp() bool {
	if o != nil && o.Op != nil {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *JSONPatchElt) SetOp(v string) {
	o.Op = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *JSONPatchElt) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONPatchElt) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *JSONPatchElt) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *JSONPatchElt) SetPath(v string) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSONPatchElt) GetValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSONPatchElt) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *JSONPatchElt) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *JSONPatchElt) SetValue(v interface{}) {
	o.Value = v
}

func (o JSONPatchElt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Op != nil {
		toSerialize["op"] = o.Op
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableJSONPatchElt struct {
	value *JSONPatchElt
	isSet bool
}

func (v NullableJSONPatchElt) Get() *JSONPatchElt {
	return v.value
}

func (v *NullableJSONPatchElt) Set(val *JSONPatchElt) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONPatchElt) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONPatchElt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONPatchElt(val *JSONPatchElt) *NullableJSONPatchElt {
	return &NullableJSONPatchElt{value: val, isSet: true}
}

func (v NullableJSONPatchElt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONPatchElt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


