/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// UnboundedSegmentUserState struct for UnboundedSegmentUserState
type UnboundedSegmentUserState struct {
	Included *UnboundedSegmentUserList `json:"included,omitempty"`
	Excluded *UnboundedSegmentUserList `json:"excluded,omitempty"`
}

// NewUnboundedSegmentUserState instantiates a new UnboundedSegmentUserState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnboundedSegmentUserState() *UnboundedSegmentUserState {
	this := UnboundedSegmentUserState{}
	return &this
}

// NewUnboundedSegmentUserStateWithDefaults instantiates a new UnboundedSegmentUserState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnboundedSegmentUserStateWithDefaults() *UnboundedSegmentUserState {
	this := UnboundedSegmentUserState{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *UnboundedSegmentUserState) GetIncluded() UnboundedSegmentUserList {
	if o == nil || o.Included == nil {
		var ret UnboundedSegmentUserList
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnboundedSegmentUserState) GetIncludedOk() (*UnboundedSegmentUserList, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *UnboundedSegmentUserState) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given UnboundedSegmentUserList and assigns it to the Included field.
func (o *UnboundedSegmentUserState) SetIncluded(v UnboundedSegmentUserList) {
	o.Included = &v
}

// GetExcluded returns the Excluded field value if set, zero value otherwise.
func (o *UnboundedSegmentUserState) GetExcluded() UnboundedSegmentUserList {
	if o == nil || o.Excluded == nil {
		var ret UnboundedSegmentUserList
		return ret
	}
	return *o.Excluded
}

// GetExcludedOk returns a tuple with the Excluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnboundedSegmentUserState) GetExcludedOk() (*UnboundedSegmentUserList, bool) {
	if o == nil || o.Excluded == nil {
		return nil, false
	}
	return o.Excluded, true
}

// HasExcluded returns a boolean if a field has been set.
func (o *UnboundedSegmentUserState) HasExcluded() bool {
	if o != nil && o.Excluded != nil {
		return true
	}

	return false
}

// SetExcluded gets a reference to the given UnboundedSegmentUserList and assigns it to the Excluded field.
func (o *UnboundedSegmentUserState) SetExcluded(v UnboundedSegmentUserList) {
	o.Excluded = &v
}

func (o UnboundedSegmentUserState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Excluded != nil {
		toSerialize["excluded"] = o.Excluded
	}
	return json.Marshal(toSerialize)
}

type NullableUnboundedSegmentUserState struct {
	value *UnboundedSegmentUserState
	isSet bool
}

func (v NullableUnboundedSegmentUserState) Get() *UnboundedSegmentUserState {
	return v.value
}

func (v *NullableUnboundedSegmentUserState) Set(val *UnboundedSegmentUserState) {
	v.value = val
	v.isSet = true
}

func (v NullableUnboundedSegmentUserState) IsSet() bool {
	return v.isSet
}

func (v *NullableUnboundedSegmentUserState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnboundedSegmentUserState(val *UnboundedSegmentUserState) *NullableUnboundedSegmentUserState {
	return &NullableUnboundedSegmentUserState{value: val, isSet: true}
}

func (v NullableUnboundedSegmentUserState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnboundedSegmentUserState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


