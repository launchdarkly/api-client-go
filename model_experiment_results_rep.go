/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentResultsRep struct for ExperimentResultsRep
type ExperimentResultsRep struct {
	Links *map[string]InlineResponse200 `json:"_links,omitempty"`
	Metadata *[]ExperimentResultsRepMetadata `json:"metadata,omitempty"`
	Totals *[]ExperimentResultsRepTotals `json:"totals,omitempty"`
	Series *[]ExperimentResultsRepSeries `json:"series,omitempty"`
	Stats *ExperimentStatsRep `json:"stats,omitempty"`
	Granularity *string `json:"granularity,omitempty"`
}

// NewExperimentResultsRep instantiates a new ExperimentResultsRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentResultsRep() *ExperimentResultsRep {
	this := ExperimentResultsRep{}
	return &this
}

// NewExperimentResultsRepWithDefaults instantiates a new ExperimentResultsRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentResultsRepWithDefaults() *ExperimentResultsRep {
	this := ExperimentResultsRep{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetLinks() map[string]InlineResponse200 {
	if o == nil || o.Links == nil {
		var ret map[string]InlineResponse200
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetLinksOk() (*map[string]InlineResponse200, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]InlineResponse200 and assigns it to the Links field.
func (o *ExperimentResultsRep) SetLinks(v map[string]InlineResponse200) {
	o.Links = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetMetadata() []ExperimentResultsRepMetadata {
	if o == nil || o.Metadata == nil {
		var ret []ExperimentResultsRepMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetMetadataOk() (*[]ExperimentResultsRepMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []ExperimentResultsRepMetadata and assigns it to the Metadata field.
func (o *ExperimentResultsRep) SetMetadata(v []ExperimentResultsRepMetadata) {
	o.Metadata = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetTotals() []ExperimentResultsRepTotals {
	if o == nil || o.Totals == nil {
		var ret []ExperimentResultsRepTotals
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetTotalsOk() (*[]ExperimentResultsRepTotals, bool) {
	if o == nil || o.Totals == nil {
		return nil, false
	}
	return o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasTotals() bool {
	if o != nil && o.Totals != nil {
		return true
	}

	return false
}

// SetTotals gets a reference to the given []ExperimentResultsRepTotals and assigns it to the Totals field.
func (o *ExperimentResultsRep) SetTotals(v []ExperimentResultsRepTotals) {
	o.Totals = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetSeries() []ExperimentResultsRepSeries {
	if o == nil || o.Series == nil {
		var ret []ExperimentResultsRepSeries
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetSeriesOk() (*[]ExperimentResultsRepSeries, bool) {
	if o == nil || o.Series == nil {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasSeries() bool {
	if o != nil && o.Series != nil {
		return true
	}

	return false
}

// SetSeries gets a reference to the given []ExperimentResultsRepSeries and assigns it to the Series field.
func (o *ExperimentResultsRep) SetSeries(v []ExperimentResultsRepSeries) {
	o.Series = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetStats() ExperimentStatsRep {
	if o == nil || o.Stats == nil {
		var ret ExperimentStatsRep
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetStatsOk() (*ExperimentStatsRep, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ExperimentStatsRep and assigns it to the Stats field.
func (o *ExperimentResultsRep) SetStats(v ExperimentStatsRep) {
	o.Stats = &v
}

// GetGranularity returns the Granularity field value if set, zero value otherwise.
func (o *ExperimentResultsRep) GetGranularity() string {
	if o == nil || o.Granularity == nil {
		var ret string
		return ret
	}
	return *o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRep) GetGranularityOk() (*string, bool) {
	if o == nil || o.Granularity == nil {
		return nil, false
	}
	return o.Granularity, true
}

// HasGranularity returns a boolean if a field has been set.
func (o *ExperimentResultsRep) HasGranularity() bool {
	if o != nil && o.Granularity != nil {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given string and assigns it to the Granularity field.
func (o *ExperimentResultsRep) SetGranularity(v string) {
	o.Granularity = &v
}

func (o ExperimentResultsRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Totals != nil {
		toSerialize["totals"] = o.Totals
	}
	if o.Series != nil {
		toSerialize["series"] = o.Series
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Granularity != nil {
		toSerialize["granularity"] = o.Granularity
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentResultsRep struct {
	value *ExperimentResultsRep
	isSet bool
}

func (v NullableExperimentResultsRep) Get() *ExperimentResultsRep {
	return v.value
}

func (v *NullableExperimentResultsRep) Set(val *ExperimentResultsRep) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentResultsRep) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentResultsRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentResultsRep(val *ExperimentResultsRep) *NullableExperimentResultsRep {
	return &NullableExperimentResultsRep{value: val, isSet: true}
}

func (v NullableExperimentResultsRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentResultsRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


