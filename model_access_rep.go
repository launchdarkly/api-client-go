/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// AccessRep struct for AccessRep
type AccessRep struct {
	Denied *[]AccessRepDenied `json:"denied,omitempty"`
}

// NewAccessRep instantiates a new AccessRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRep() *AccessRep {
	this := AccessRep{}
	return &this
}

// NewAccessRepWithDefaults instantiates a new AccessRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRepWithDefaults() *AccessRep {
	this := AccessRep{}
	return &this
}

// GetDenied returns the Denied field value if set, zero value otherwise.
func (o *AccessRep) GetDenied() []AccessRepDenied {
	if o == nil || o.Denied == nil {
		var ret []AccessRepDenied
		return ret
	}
	return *o.Denied
}

// GetDeniedOk returns a tuple with the Denied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRep) GetDeniedOk() (*[]AccessRepDenied, bool) {
	if o == nil || o.Denied == nil {
		return nil, false
	}
	return o.Denied, true
}

// HasDenied returns a boolean if a field has been set.
func (o *AccessRep) HasDenied() bool {
	if o != nil && o.Denied != nil {
		return true
	}

	return false
}

// SetDenied gets a reference to the given []AccessRepDenied and assigns it to the Denied field.
func (o *AccessRep) SetDenied(v []AccessRepDenied) {
	o.Denied = &v
}

func (o AccessRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Denied != nil {
		toSerialize["denied"] = o.Denied
	}
	return json.Marshal(toSerialize)
}

type NullableAccessRep struct {
	value *AccessRep
	isSet bool
}

func (v NullableAccessRep) Get() *AccessRep {
	return v.value
}

func (v *NullableAccessRep) Set(val *AccessRep) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRep) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRep(val *AccessRep) *NullableAccessRep {
	return &NullableAccessRep{value: val, isSet: true}
}

func (v NullableAccessRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


