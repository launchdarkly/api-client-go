/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// DependentFlagWithEnvs struct for DependentFlagWithEnvs
type DependentFlagWithEnvs struct {
	Name *string `json:"name,omitempty"`
	Key *string `json:"key,omitempty"`
	Environments *[]DependentFlagWithEnvsEnvironments `json:"environments,omitempty"`
}

// NewDependentFlagWithEnvs instantiates a new DependentFlagWithEnvs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependentFlagWithEnvs() *DependentFlagWithEnvs {
	this := DependentFlagWithEnvs{}
	return &this
}

// NewDependentFlagWithEnvsWithDefaults instantiates a new DependentFlagWithEnvs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependentFlagWithEnvsWithDefaults() *DependentFlagWithEnvs {
	this := DependentFlagWithEnvs{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DependentFlagWithEnvs) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagWithEnvs) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DependentFlagWithEnvs) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DependentFlagWithEnvs) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DependentFlagWithEnvs) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagWithEnvs) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DependentFlagWithEnvs) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DependentFlagWithEnvs) SetKey(v string) {
	o.Key = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *DependentFlagWithEnvs) GetEnvironments() []DependentFlagWithEnvsEnvironments {
	if o == nil || o.Environments == nil {
		var ret []DependentFlagWithEnvsEnvironments
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependentFlagWithEnvs) GetEnvironmentsOk() (*[]DependentFlagWithEnvsEnvironments, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *DependentFlagWithEnvs) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []DependentFlagWithEnvsEnvironments and assigns it to the Environments field.
func (o *DependentFlagWithEnvs) SetEnvironments(v []DependentFlagWithEnvsEnvironments) {
	o.Environments = &v
}

func (o DependentFlagWithEnvs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableDependentFlagWithEnvs struct {
	value *DependentFlagWithEnvs
	isSet bool
}

func (v NullableDependentFlagWithEnvs) Get() *DependentFlagWithEnvs {
	return v.value
}

func (v *NullableDependentFlagWithEnvs) Set(val *DependentFlagWithEnvs) {
	v.value = val
	v.isSet = true
}

func (v NullableDependentFlagWithEnvs) IsSet() bool {
	return v.isSet
}

func (v *NullableDependentFlagWithEnvs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependentFlagWithEnvs(val *DependentFlagWithEnvs) *NullableDependentFlagWithEnvs {
	return &NullableDependentFlagWithEnvs{value: val, isSet: true}
}

func (v NullableDependentFlagWithEnvs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependentFlagWithEnvs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


