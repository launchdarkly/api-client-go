/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// UserSettingsCollectionItems struct for UserSettingsCollectionItems
type UserSettingsCollectionItems struct {
	Links *map[string]InlineResponse200 `json:"_links,omitempty"`
	Value interface{} `json:"_value,omitempty"`
	Setting interface{} `json:"setting,omitempty"`
}

// NewUserSettingsCollectionItems instantiates a new UserSettingsCollectionItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsCollectionItems() *UserSettingsCollectionItems {
	this := UserSettingsCollectionItems{}
	return &this
}

// NewUserSettingsCollectionItemsWithDefaults instantiates a new UserSettingsCollectionItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsCollectionItemsWithDefaults() *UserSettingsCollectionItems {
	this := UserSettingsCollectionItems{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UserSettingsCollectionItems) GetLinks() map[string]InlineResponse200 {
	if o == nil || o.Links == nil {
		var ret map[string]InlineResponse200
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsCollectionItems) GetLinksOk() (*map[string]InlineResponse200, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UserSettingsCollectionItems) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]InlineResponse200 and assigns it to the Links field.
func (o *UserSettingsCollectionItems) SetLinks(v map[string]InlineResponse200) {
	o.Links = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsCollectionItems) GetValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsCollectionItems) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UserSettingsCollectionItems) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *UserSettingsCollectionItems) SetValue(v interface{}) {
	o.Value = v
}

// GetSetting returns the Setting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsCollectionItems) GetSetting() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsCollectionItems) GetSettingOk() (*interface{}, bool) {
	if o == nil || o.Setting == nil {
		return nil, false
	}
	return &o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *UserSettingsCollectionItems) HasSetting() bool {
	if o != nil && o.Setting != nil {
		return true
	}

	return false
}

// SetSetting gets a reference to the given interface{} and assigns it to the Setting field.
func (o *UserSettingsCollectionItems) SetSetting(v interface{}) {
	o.Setting = v
}

func (o UserSettingsCollectionItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	if o.Value != nil {
		toSerialize["_value"] = o.Value
	}
	if o.Setting != nil {
		toSerialize["setting"] = o.Setting
	}
	return json.Marshal(toSerialize)
}

type NullableUserSettingsCollectionItems struct {
	value *UserSettingsCollectionItems
	isSet bool
}

func (v NullableUserSettingsCollectionItems) Get() *UserSettingsCollectionItems {
	return v.value
}

func (v *NullableUserSettingsCollectionItems) Set(val *UserSettingsCollectionItems) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsCollectionItems) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsCollectionItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsCollectionItems(val *UserSettingsCollectionItems) *NullableUserSettingsCollectionItems {
	return &NullableUserSettingsCollectionItems{value: val, isSet: true}
}

func (v NullableUserSettingsCollectionItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsCollectionItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


