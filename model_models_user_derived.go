/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
	"time"
)

// ModelsUserDerived struct for ModelsUserDerived
type ModelsUserDerived struct {
	Value interface{} `json:"value,omitempty"`
	LastDerived *time.Time `json:"lastDerived,omitempty"`
}

// NewModelsUserDerived instantiates a new ModelsUserDerived object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsUserDerived() *ModelsUserDerived {
	this := ModelsUserDerived{}
	return &this
}

// NewModelsUserDerivedWithDefaults instantiates a new ModelsUserDerived object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsUserDerivedWithDefaults() *ModelsUserDerived {
	this := ModelsUserDerived{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsUserDerived) GetValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsUserDerived) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsUserDerived) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *ModelsUserDerived) SetValue(v interface{}) {
	o.Value = v
}

// GetLastDerived returns the LastDerived field value if set, zero value otherwise.
func (o *ModelsUserDerived) GetLastDerived() time.Time {
	if o == nil || o.LastDerived == nil {
		var ret time.Time
		return ret
	}
	return *o.LastDerived
}

// GetLastDerivedOk returns a tuple with the LastDerived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserDerived) GetLastDerivedOk() (*time.Time, bool) {
	if o == nil || o.LastDerived == nil {
		return nil, false
	}
	return o.LastDerived, true
}

// HasLastDerived returns a boolean if a field has been set.
func (o *ModelsUserDerived) HasLastDerived() bool {
	if o != nil && o.LastDerived != nil {
		return true
	}

	return false
}

// SetLastDerived gets a reference to the given time.Time and assigns it to the LastDerived field.
func (o *ModelsUserDerived) SetLastDerived(v time.Time) {
	o.LastDerived = &v
}

func (o ModelsUserDerived) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.LastDerived != nil {
		toSerialize["lastDerived"] = o.LastDerived
	}
	return json.Marshal(toSerialize)
}

type NullableModelsUserDerived struct {
	value *ModelsUserDerived
	isSet bool
}

func (v NullableModelsUserDerived) Get() *ModelsUserDerived {
	return v.value
}

func (v *NullableModelsUserDerived) Set(val *ModelsUserDerived) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsUserDerived) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsUserDerived) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsUserDerived(val *ModelsUserDerived) *NullableModelsUserDerived {
	return &NullableModelsUserDerived{value: val, isSet: true}
}

func (v NullableModelsUserDerived) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsUserDerived) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


