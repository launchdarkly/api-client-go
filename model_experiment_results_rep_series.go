/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentResultsRepSeries struct for ExperimentResultsRepSeries
type ExperimentResultsRepSeries struct {
	Time *int64 `json:"Time,omitempty"`
	VariationData *[]ExperimentTimeSeriesVariationSlice `json:"VariationData,omitempty"`
}

// NewExperimentResultsRepSeries instantiates a new ExperimentResultsRepSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentResultsRepSeries() *ExperimentResultsRepSeries {
	this := ExperimentResultsRepSeries{}
	return &this
}

// NewExperimentResultsRepSeriesWithDefaults instantiates a new ExperimentResultsRepSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentResultsRepSeriesWithDefaults() *ExperimentResultsRepSeries {
	this := ExperimentResultsRepSeries{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ExperimentResultsRepSeries) GetTime() int64 {
	if o == nil || o.Time == nil {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRepSeries) GetTimeOk() (*int64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ExperimentResultsRepSeries) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *ExperimentResultsRepSeries) SetTime(v int64) {
	o.Time = &v
}

// GetVariationData returns the VariationData field value if set, zero value otherwise.
func (o *ExperimentResultsRepSeries) GetVariationData() []ExperimentTimeSeriesVariationSlice {
	if o == nil || o.VariationData == nil {
		var ret []ExperimentTimeSeriesVariationSlice
		return ret
	}
	return *o.VariationData
}

// GetVariationDataOk returns a tuple with the VariationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentResultsRepSeries) GetVariationDataOk() (*[]ExperimentTimeSeriesVariationSlice, bool) {
	if o == nil || o.VariationData == nil {
		return nil, false
	}
	return o.VariationData, true
}

// HasVariationData returns a boolean if a field has been set.
func (o *ExperimentResultsRepSeries) HasVariationData() bool {
	if o != nil && o.VariationData != nil {
		return true
	}

	return false
}

// SetVariationData gets a reference to the given []ExperimentTimeSeriesVariationSlice and assigns it to the VariationData field.
func (o *ExperimentResultsRepSeries) SetVariationData(v []ExperimentTimeSeriesVariationSlice) {
	o.VariationData = &v
}

func (o ExperimentResultsRepSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Time != nil {
		toSerialize["Time"] = o.Time
	}
	if o.VariationData != nil {
		toSerialize["VariationData"] = o.VariationData
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentResultsRepSeries struct {
	value *ExperimentResultsRepSeries
	isSet bool
}

func (v NullableExperimentResultsRepSeries) Get() *ExperimentResultsRepSeries {
	return v.value
}

func (v *NullableExperimentResultsRepSeries) Set(val *ExperimentResultsRepSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentResultsRepSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentResultsRepSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentResultsRepSeries(val *ExperimentResultsRepSeries) *NullableExperimentResultsRepSeries {
	return &NullableExperimentResultsRepSeries{value: val, isSet: true}
}

func (v NullableExperimentResultsRepSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentResultsRepSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


