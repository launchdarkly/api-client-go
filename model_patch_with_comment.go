/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// PatchWithComment struct for PatchWithComment
type PatchWithComment struct {
	Patch *[]JSONPatchElt `json:"patch,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewPatchWithComment instantiates a new PatchWithComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchWithComment() *PatchWithComment {
	this := PatchWithComment{}
	return &this
}

// NewPatchWithCommentWithDefaults instantiates a new PatchWithComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchWithCommentWithDefaults() *PatchWithComment {
	this := PatchWithComment{}
	return &this
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *PatchWithComment) GetPatch() []JSONPatchElt {
	if o == nil || o.Patch == nil {
		var ret []JSONPatchElt
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchWithComment) GetPatchOk() (*[]JSONPatchElt, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *PatchWithComment) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given []JSONPatchElt and assigns it to the Patch field.
func (o *PatchWithComment) SetPatch(v []JSONPatchElt) {
	o.Patch = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PatchWithComment) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchWithComment) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PatchWithComment) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *PatchWithComment) SetComment(v string) {
	o.Comment = &v
}

func (o PatchWithComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Patch != nil {
		toSerialize["patch"] = o.Patch
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullablePatchWithComment struct {
	value *PatchWithComment
	isSet bool
}

func (v NullablePatchWithComment) Get() *PatchWithComment {
	return v.value
}

func (v *NullablePatchWithComment) Set(val *PatchWithComment) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchWithComment) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchWithComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchWithComment(val *PatchWithComment) *NullablePatchWithComment {
	return &NullablePatchWithComment{value: val, isSet: true}
}

func (v NullablePatchWithComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchWithComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


