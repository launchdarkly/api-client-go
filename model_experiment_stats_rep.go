/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentStatsRep struct for ExperimentStatsRep
type ExperimentStatsRep struct {
	PValue *float32 `json:"pValue,omitempty"`
	Chi2 *float32 `json:"chi2,omitempty"`
	WinningVariationIdx *int32 `json:"winningVariationIdx,omitempty"`
	MinSampleSizeMet *bool `json:"minSampleSizeMet,omitempty"`
}

// NewExperimentStatsRep instantiates a new ExperimentStatsRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentStatsRep() *ExperimentStatsRep {
	this := ExperimentStatsRep{}
	return &this
}

// NewExperimentStatsRepWithDefaults instantiates a new ExperimentStatsRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentStatsRepWithDefaults() *ExperimentStatsRep {
	this := ExperimentStatsRep{}
	return &this
}

// GetPValue returns the PValue field value if set, zero value otherwise.
func (o *ExperimentStatsRep) GetPValue() float32 {
	if o == nil || o.PValue == nil {
		var ret float32
		return ret
	}
	return *o.PValue
}

// GetPValueOk returns a tuple with the PValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentStatsRep) GetPValueOk() (*float32, bool) {
	if o == nil || o.PValue == nil {
		return nil, false
	}
	return o.PValue, true
}

// HasPValue returns a boolean if a field has been set.
func (o *ExperimentStatsRep) HasPValue() bool {
	if o != nil && o.PValue != nil {
		return true
	}

	return false
}

// SetPValue gets a reference to the given float32 and assigns it to the PValue field.
func (o *ExperimentStatsRep) SetPValue(v float32) {
	o.PValue = &v
}

// GetChi2 returns the Chi2 field value if set, zero value otherwise.
func (o *ExperimentStatsRep) GetChi2() float32 {
	if o == nil || o.Chi2 == nil {
		var ret float32
		return ret
	}
	return *o.Chi2
}

// GetChi2Ok returns a tuple with the Chi2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentStatsRep) GetChi2Ok() (*float32, bool) {
	if o == nil || o.Chi2 == nil {
		return nil, false
	}
	return o.Chi2, true
}

// HasChi2 returns a boolean if a field has been set.
func (o *ExperimentStatsRep) HasChi2() bool {
	if o != nil && o.Chi2 != nil {
		return true
	}

	return false
}

// SetChi2 gets a reference to the given float32 and assigns it to the Chi2 field.
func (o *ExperimentStatsRep) SetChi2(v float32) {
	o.Chi2 = &v
}

// GetWinningVariationIdx returns the WinningVariationIdx field value if set, zero value otherwise.
func (o *ExperimentStatsRep) GetWinningVariationIdx() int32 {
	if o == nil || o.WinningVariationIdx == nil {
		var ret int32
		return ret
	}
	return *o.WinningVariationIdx
}

// GetWinningVariationIdxOk returns a tuple with the WinningVariationIdx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentStatsRep) GetWinningVariationIdxOk() (*int32, bool) {
	if o == nil || o.WinningVariationIdx == nil {
		return nil, false
	}
	return o.WinningVariationIdx, true
}

// HasWinningVariationIdx returns a boolean if a field has been set.
func (o *ExperimentStatsRep) HasWinningVariationIdx() bool {
	if o != nil && o.WinningVariationIdx != nil {
		return true
	}

	return false
}

// SetWinningVariationIdx gets a reference to the given int32 and assigns it to the WinningVariationIdx field.
func (o *ExperimentStatsRep) SetWinningVariationIdx(v int32) {
	o.WinningVariationIdx = &v
}

// GetMinSampleSizeMet returns the MinSampleSizeMet field value if set, zero value otherwise.
func (o *ExperimentStatsRep) GetMinSampleSizeMet() bool {
	if o == nil || o.MinSampleSizeMet == nil {
		var ret bool
		return ret
	}
	return *o.MinSampleSizeMet
}

// GetMinSampleSizeMetOk returns a tuple with the MinSampleSizeMet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentStatsRep) GetMinSampleSizeMetOk() (*bool, bool) {
	if o == nil || o.MinSampleSizeMet == nil {
		return nil, false
	}
	return o.MinSampleSizeMet, true
}

// HasMinSampleSizeMet returns a boolean if a field has been set.
func (o *ExperimentStatsRep) HasMinSampleSizeMet() bool {
	if o != nil && o.MinSampleSizeMet != nil {
		return true
	}

	return false
}

// SetMinSampleSizeMet gets a reference to the given bool and assigns it to the MinSampleSizeMet field.
func (o *ExperimentStatsRep) SetMinSampleSizeMet(v bool) {
	o.MinSampleSizeMet = &v
}

func (o ExperimentStatsRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PValue != nil {
		toSerialize["pValue"] = o.PValue
	}
	if o.Chi2 != nil {
		toSerialize["chi2"] = o.Chi2
	}
	if o.WinningVariationIdx != nil {
		toSerialize["winningVariationIdx"] = o.WinningVariationIdx
	}
	if o.MinSampleSizeMet != nil {
		toSerialize["minSampleSizeMet"] = o.MinSampleSizeMet
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentStatsRep struct {
	value *ExperimentStatsRep
	isSet bool
}

func (v NullableExperimentStatsRep) Get() *ExperimentStatsRep {
	return v.value
}

func (v *NullableExperimentStatsRep) Set(val *ExperimentStatsRep) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentStatsRep) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentStatsRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentStatsRep(val *ExperimentStatsRep) *NullableExperimentStatsRep {
	return &NullableExperimentStatsRep{value: val, isSet: true}
}

func (v NullableExperimentStatsRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentStatsRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


