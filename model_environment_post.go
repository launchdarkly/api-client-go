/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// EnvironmentPost struct for EnvironmentPost
type EnvironmentPost struct {
	Name *string `json:"name,omitempty"`
	Key *string `json:"key,omitempty"`
	Color *string `json:"color,omitempty"`
	DefaultTtl *int32 `json:"defaultTtl,omitempty"`
	SecureMode *bool `json:"secureMode,omitempty"`
	DefaultTrackEvents *bool `json:"defaultTrackEvents,omitempty"`
	ConfirmChanges *bool `json:"confirmChanges,omitempty"`
	RequireComments *bool `json:"requireComments,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
}

// NewEnvironmentPost instantiates a new EnvironmentPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentPost() *EnvironmentPost {
	this := EnvironmentPost{}
	return &this
}

// NewEnvironmentPostWithDefaults instantiates a new EnvironmentPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentPostWithDefaults() *EnvironmentPost {
	this := EnvironmentPost{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentPost) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentPost) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentPost) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *EnvironmentPost) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *EnvironmentPost) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *EnvironmentPost) SetKey(v string) {
	o.Key = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *EnvironmentPost) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *EnvironmentPost) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *EnvironmentPost) SetColor(v string) {
	o.Color = &v
}

// GetDefaultTtl returns the DefaultTtl field value if set, zero value otherwise.
func (o *EnvironmentPost) GetDefaultTtl() int32 {
	if o == nil || o.DefaultTtl == nil {
		var ret int32
		return ret
	}
	return *o.DefaultTtl
}

// GetDefaultTtlOk returns a tuple with the DefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetDefaultTtlOk() (*int32, bool) {
	if o == nil || o.DefaultTtl == nil {
		return nil, false
	}
	return o.DefaultTtl, true
}

// HasDefaultTtl returns a boolean if a field has been set.
func (o *EnvironmentPost) HasDefaultTtl() bool {
	if o != nil && o.DefaultTtl != nil {
		return true
	}

	return false
}

// SetDefaultTtl gets a reference to the given int32 and assigns it to the DefaultTtl field.
func (o *EnvironmentPost) SetDefaultTtl(v int32) {
	o.DefaultTtl = &v
}

// GetSecureMode returns the SecureMode field value if set, zero value otherwise.
func (o *EnvironmentPost) GetSecureMode() bool {
	if o == nil || o.SecureMode == nil {
		var ret bool
		return ret
	}
	return *o.SecureMode
}

// GetSecureModeOk returns a tuple with the SecureMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetSecureModeOk() (*bool, bool) {
	if o == nil || o.SecureMode == nil {
		return nil, false
	}
	return o.SecureMode, true
}

// HasSecureMode returns a boolean if a field has been set.
func (o *EnvironmentPost) HasSecureMode() bool {
	if o != nil && o.SecureMode != nil {
		return true
	}

	return false
}

// SetSecureMode gets a reference to the given bool and assigns it to the SecureMode field.
func (o *EnvironmentPost) SetSecureMode(v bool) {
	o.SecureMode = &v
}

// GetDefaultTrackEvents returns the DefaultTrackEvents field value if set, zero value otherwise.
func (o *EnvironmentPost) GetDefaultTrackEvents() bool {
	if o == nil || o.DefaultTrackEvents == nil {
		var ret bool
		return ret
	}
	return *o.DefaultTrackEvents
}

// GetDefaultTrackEventsOk returns a tuple with the DefaultTrackEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetDefaultTrackEventsOk() (*bool, bool) {
	if o == nil || o.DefaultTrackEvents == nil {
		return nil, false
	}
	return o.DefaultTrackEvents, true
}

// HasDefaultTrackEvents returns a boolean if a field has been set.
func (o *EnvironmentPost) HasDefaultTrackEvents() bool {
	if o != nil && o.DefaultTrackEvents != nil {
		return true
	}

	return false
}

// SetDefaultTrackEvents gets a reference to the given bool and assigns it to the DefaultTrackEvents field.
func (o *EnvironmentPost) SetDefaultTrackEvents(v bool) {
	o.DefaultTrackEvents = &v
}

// GetConfirmChanges returns the ConfirmChanges field value if set, zero value otherwise.
func (o *EnvironmentPost) GetConfirmChanges() bool {
	if o == nil || o.ConfirmChanges == nil {
		var ret bool
		return ret
	}
	return *o.ConfirmChanges
}

// GetConfirmChangesOk returns a tuple with the ConfirmChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetConfirmChangesOk() (*bool, bool) {
	if o == nil || o.ConfirmChanges == nil {
		return nil, false
	}
	return o.ConfirmChanges, true
}

// HasConfirmChanges returns a boolean if a field has been set.
func (o *EnvironmentPost) HasConfirmChanges() bool {
	if o != nil && o.ConfirmChanges != nil {
		return true
	}

	return false
}

// SetConfirmChanges gets a reference to the given bool and assigns it to the ConfirmChanges field.
func (o *EnvironmentPost) SetConfirmChanges(v bool) {
	o.ConfirmChanges = &v
}

// GetRequireComments returns the RequireComments field value if set, zero value otherwise.
func (o *EnvironmentPost) GetRequireComments() bool {
	if o == nil || o.RequireComments == nil {
		var ret bool
		return ret
	}
	return *o.RequireComments
}

// GetRequireCommentsOk returns a tuple with the RequireComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetRequireCommentsOk() (*bool, bool) {
	if o == nil || o.RequireComments == nil {
		return nil, false
	}
	return o.RequireComments, true
}

// HasRequireComments returns a boolean if a field has been set.
func (o *EnvironmentPost) HasRequireComments() bool {
	if o != nil && o.RequireComments != nil {
		return true
	}

	return false
}

// SetRequireComments gets a reference to the given bool and assigns it to the RequireComments field.
func (o *EnvironmentPost) SetRequireComments(v bool) {
	o.RequireComments = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EnvironmentPost) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentPost) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EnvironmentPost) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EnvironmentPost) SetTags(v []string) {
	o.Tags = &v
}

func (o EnvironmentPost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.DefaultTtl != nil {
		toSerialize["defaultTtl"] = o.DefaultTtl
	}
	if o.SecureMode != nil {
		toSerialize["secureMode"] = o.SecureMode
	}
	if o.DefaultTrackEvents != nil {
		toSerialize["defaultTrackEvents"] = o.DefaultTrackEvents
	}
	if o.ConfirmChanges != nil {
		toSerialize["confirmChanges"] = o.ConfirmChanges
	}
	if o.RequireComments != nil {
		toSerialize["requireComments"] = o.RequireComments
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentPost struct {
	value *EnvironmentPost
	isSet bool
}

func (v NullableEnvironmentPost) Get() *EnvironmentPost {
	return v.value
}

func (v *NullableEnvironmentPost) Set(val *EnvironmentPost) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentPost) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentPost(val *EnvironmentPost) *NullableEnvironmentPost {
	return &NullableEnvironmentPost{value: val, isSet: true}
}

func (v NullableEnvironmentPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


