/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentRep struct for ExperimentRep
type ExperimentRep struct {
	MetricKey *string `json:"metricKey,omitempty"`
	Metric *MetricListingRep `json:"_metric,omitempty"`
	Environments *[]string `json:"environments,omitempty"`
	EnvironmentSettings *map[string]ExperimentInfoRepEnvironmentSettings `json:"_environmentSettings,omitempty"`
}

// NewExperimentRep instantiates a new ExperimentRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentRep() *ExperimentRep {
	this := ExperimentRep{}
	return &this
}

// NewExperimentRepWithDefaults instantiates a new ExperimentRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentRepWithDefaults() *ExperimentRep {
	this := ExperimentRep{}
	return &this
}

// GetMetricKey returns the MetricKey field value if set, zero value otherwise.
func (o *ExperimentRep) GetMetricKey() string {
	if o == nil || o.MetricKey == nil {
		var ret string
		return ret
	}
	return *o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRep) GetMetricKeyOk() (*string, bool) {
	if o == nil || o.MetricKey == nil {
		return nil, false
	}
	return o.MetricKey, true
}

// HasMetricKey returns a boolean if a field has been set.
func (o *ExperimentRep) HasMetricKey() bool {
	if o != nil && o.MetricKey != nil {
		return true
	}

	return false
}

// SetMetricKey gets a reference to the given string and assigns it to the MetricKey field.
func (o *ExperimentRep) SetMetricKey(v string) {
	o.MetricKey = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *ExperimentRep) GetMetric() MetricListingRep {
	if o == nil || o.Metric == nil {
		var ret MetricListingRep
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRep) GetMetricOk() (*MetricListingRep, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *ExperimentRep) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given MetricListingRep and assigns it to the Metric field.
func (o *ExperimentRep) SetMetric(v MetricListingRep) {
	o.Metric = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ExperimentRep) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRep) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ExperimentRep) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *ExperimentRep) SetEnvironments(v []string) {
	o.Environments = &v
}

// GetEnvironmentSettings returns the EnvironmentSettings field value if set, zero value otherwise.
func (o *ExperimentRep) GetEnvironmentSettings() map[string]ExperimentInfoRepEnvironmentSettings {
	if o == nil || o.EnvironmentSettings == nil {
		var ret map[string]ExperimentInfoRepEnvironmentSettings
		return ret
	}
	return *o.EnvironmentSettings
}

// GetEnvironmentSettingsOk returns a tuple with the EnvironmentSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRep) GetEnvironmentSettingsOk() (*map[string]ExperimentInfoRepEnvironmentSettings, bool) {
	if o == nil || o.EnvironmentSettings == nil {
		return nil, false
	}
	return o.EnvironmentSettings, true
}

// HasEnvironmentSettings returns a boolean if a field has been set.
func (o *ExperimentRep) HasEnvironmentSettings() bool {
	if o != nil && o.EnvironmentSettings != nil {
		return true
	}

	return false
}

// SetEnvironmentSettings gets a reference to the given map[string]ExperimentInfoRepEnvironmentSettings and assigns it to the EnvironmentSettings field.
func (o *ExperimentRep) SetEnvironmentSettings(v map[string]ExperimentInfoRepEnvironmentSettings) {
	o.EnvironmentSettings = &v
}

func (o ExperimentRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricKey != nil {
		toSerialize["metricKey"] = o.MetricKey
	}
	if o.Metric != nil {
		toSerialize["_metric"] = o.Metric
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	if o.EnvironmentSettings != nil {
		toSerialize["_environmentSettings"] = o.EnvironmentSettings
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentRep struct {
	value *ExperimentRep
	isSet bool
}

func (v NullableExperimentRep) Get() *ExperimentRep {
	return v.value
}

func (v *NullableExperimentRep) Set(val *ExperimentRep) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentRep) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentRep(val *ExperimentRep) *NullableExperimentRep {
	return &NullableExperimentRep{value: val, isSet: true}
}

func (v NullableExperimentRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


