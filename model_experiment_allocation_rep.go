/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentAllocationRep struct for ExperimentAllocationRep
type ExperimentAllocationRep struct {
	DefaultVariation *int32 `json:"defaultVariation,omitempty"`
	CanReshuffle *bool `json:"canReshuffle,omitempty"`
}

// NewExperimentAllocationRep instantiates a new ExperimentAllocationRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentAllocationRep() *ExperimentAllocationRep {
	this := ExperimentAllocationRep{}
	return &this
}

// NewExperimentAllocationRepWithDefaults instantiates a new ExperimentAllocationRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentAllocationRepWithDefaults() *ExperimentAllocationRep {
	this := ExperimentAllocationRep{}
	return &this
}

// GetDefaultVariation returns the DefaultVariation field value if set, zero value otherwise.
func (o *ExperimentAllocationRep) GetDefaultVariation() int32 {
	if o == nil || o.DefaultVariation == nil {
		var ret int32
		return ret
	}
	return *o.DefaultVariation
}

// GetDefaultVariationOk returns a tuple with the DefaultVariation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentAllocationRep) GetDefaultVariationOk() (*int32, bool) {
	if o == nil || o.DefaultVariation == nil {
		return nil, false
	}
	return o.DefaultVariation, true
}

// HasDefaultVariation returns a boolean if a field has been set.
func (o *ExperimentAllocationRep) HasDefaultVariation() bool {
	if o != nil && o.DefaultVariation != nil {
		return true
	}

	return false
}

// SetDefaultVariation gets a reference to the given int32 and assigns it to the DefaultVariation field.
func (o *ExperimentAllocationRep) SetDefaultVariation(v int32) {
	o.DefaultVariation = &v
}

// GetCanReshuffle returns the CanReshuffle field value if set, zero value otherwise.
func (o *ExperimentAllocationRep) GetCanReshuffle() bool {
	if o == nil || o.CanReshuffle == nil {
		var ret bool
		return ret
	}
	return *o.CanReshuffle
}

// GetCanReshuffleOk returns a tuple with the CanReshuffle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentAllocationRep) GetCanReshuffleOk() (*bool, bool) {
	if o == nil || o.CanReshuffle == nil {
		return nil, false
	}
	return o.CanReshuffle, true
}

// HasCanReshuffle returns a boolean if a field has been set.
func (o *ExperimentAllocationRep) HasCanReshuffle() bool {
	if o != nil && o.CanReshuffle != nil {
		return true
	}

	return false
}

// SetCanReshuffle gets a reference to the given bool and assigns it to the CanReshuffle field.
func (o *ExperimentAllocationRep) SetCanReshuffle(v bool) {
	o.CanReshuffle = &v
}

func (o ExperimentAllocationRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultVariation != nil {
		toSerialize["defaultVariation"] = o.DefaultVariation
	}
	if o.CanReshuffle != nil {
		toSerialize["canReshuffle"] = o.CanReshuffle
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentAllocationRep struct {
	value *ExperimentAllocationRep
	isSet bool
}

func (v NullableExperimentAllocationRep) Get() *ExperimentAllocationRep {
	return v.value
}

func (v *NullableExperimentAllocationRep) Set(val *ExperimentAllocationRep) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentAllocationRep) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentAllocationRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentAllocationRep(val *ExperimentAllocationRep) *NullableExperimentAllocationRep {
	return &NullableExperimentAllocationRep{value: val, isSet: true}
}

func (v NullableExperimentAllocationRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentAllocationRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


