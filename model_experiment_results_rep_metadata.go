/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentResultsRepMetadata struct for ExperimentResultsRepMetadata
type ExperimentResultsRepMetadata struct {
	Key interface{} `json:"key,omitempty"`
}

// NewExperimentResultsRepMetadata instantiates a new ExperimentResultsRepMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentResultsRepMetadata() *ExperimentResultsRepMetadata {
	this := ExperimentResultsRepMetadata{}
	return &this
}

// NewExperimentResultsRepMetadataWithDefaults instantiates a new ExperimentResultsRepMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentResultsRepMetadataWithDefaults() *ExperimentResultsRepMetadata {
	this := ExperimentResultsRepMetadata{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperimentResultsRepMetadata) GetKey() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentResultsRepMetadata) GetKeyOk() (*interface{}, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return &o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ExperimentResultsRepMetadata) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given interface{} and assigns it to the Key field.
func (o *ExperimentResultsRepMetadata) SetKey(v interface{}) {
	o.Key = v
}

func (o ExperimentResultsRepMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentResultsRepMetadata struct {
	value *ExperimentResultsRepMetadata
	isSet bool
}

func (v NullableExperimentResultsRepMetadata) Get() *ExperimentResultsRepMetadata {
	return v.value
}

func (v *NullableExperimentResultsRepMetadata) Set(val *ExperimentResultsRepMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentResultsRepMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentResultsRepMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentResultsRepMetadata(val *ExperimentResultsRepMetadata) *NullableExperimentResultsRepMetadata {
	return &NullableExperimentResultsRepMetadata{value: val, isSet: true}
}

func (v NullableExperimentResultsRepMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentResultsRepMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


