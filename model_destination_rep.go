/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// DestinationRep struct for DestinationRep
type DestinationRep struct {
	Id *string `json:"_id,omitempty"`
	Links *map[string]InlineResponse200 `json:"_links,omitempty"`
	Name *string `json:"name,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Version *float32 `json:"version,omitempty"`
	Config interface{} `json:"config,omitempty"`
	On *bool `json:"on,omitempty"`
	Access *AccessRep `json:"_access,omitempty"`
}

// NewDestinationRep instantiates a new DestinationRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationRep() *DestinationRep {
	this := DestinationRep{}
	return &this
}

// NewDestinationRepWithDefaults instantiates a new DestinationRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationRepWithDefaults() *DestinationRep {
	this := DestinationRep{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DestinationRep) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DestinationRep) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DestinationRep) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DestinationRep) GetLinks() map[string]InlineResponse200 {
	if o == nil || o.Links == nil {
		var ret map[string]InlineResponse200
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetLinksOk() (*map[string]InlineResponse200, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DestinationRep) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]InlineResponse200 and assigns it to the Links field.
func (o *DestinationRep) SetLinks(v map[string]InlineResponse200) {
	o.Links = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DestinationRep) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DestinationRep) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DestinationRep) SetName(v string) {
	o.Name = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *DestinationRep) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *DestinationRep) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *DestinationRep) SetKind(v string) {
	o.Kind = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DestinationRep) GetVersion() float32 {
	if o == nil || o.Version == nil {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetVersionOk() (*float32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DestinationRep) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *DestinationRep) SetVersion(v float32) {
	o.Version = &v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationRep) GetConfig() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationRep) GetConfigOk() (*interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return &o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DestinationRep) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given interface{} and assigns it to the Config field.
func (o *DestinationRep) SetConfig(v interface{}) {
	o.Config = v
}

// GetOn returns the On field value if set, zero value otherwise.
func (o *DestinationRep) GetOn() bool {
	if o == nil || o.On == nil {
		var ret bool
		return ret
	}
	return *o.On
}

// GetOnOk returns a tuple with the On field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetOnOk() (*bool, bool) {
	if o == nil || o.On == nil {
		return nil, false
	}
	return o.On, true
}

// HasOn returns a boolean if a field has been set.
func (o *DestinationRep) HasOn() bool {
	if o != nil && o.On != nil {
		return true
	}

	return false
}

// SetOn gets a reference to the given bool and assigns it to the On field.
func (o *DestinationRep) SetOn(v bool) {
	o.On = &v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DestinationRep) GetAccess() AccessRep {
	if o == nil || o.Access == nil {
		var ret AccessRep
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRep) GetAccessOk() (*AccessRep, bool) {
	if o == nil || o.Access == nil {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DestinationRep) HasAccess() bool {
	if o != nil && o.Access != nil {
		return true
	}

	return false
}

// SetAccess gets a reference to the given AccessRep and assigns it to the Access field.
func (o *DestinationRep) SetAccess(v AccessRep) {
	o.Access = &v
}

func (o DestinationRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["_id"] = o.Id
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.On != nil {
		toSerialize["on"] = o.On
	}
	if o.Access != nil {
		toSerialize["_access"] = o.Access
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationRep struct {
	value *DestinationRep
	isSet bool
}

func (v NullableDestinationRep) Get() *DestinationRep {
	return v.value
}

func (v *NullableDestinationRep) Set(val *DestinationRep) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationRep) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationRep(val *DestinationRep) *NullableDestinationRep {
	return &NullableDestinationRep{value: val, isSet: true}
}

func (v NullableDestinationRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


