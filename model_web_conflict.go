/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// WebConflict struct for WebConflict
type WebConflict struct {
	Instruction *map[string]interface{} `json:"instruction,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewWebConflict instantiates a new WebConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebConflict() *WebConflict {
	this := WebConflict{}
	return &this
}

// NewWebConflictWithDefaults instantiates a new WebConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebConflictWithDefaults() *WebConflict {
	this := WebConflict{}
	return &this
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *WebConflict) GetInstruction() map[string]interface{} {
	if o == nil || o.Instruction == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebConflict) GetInstructionOk() (*map[string]interface{}, bool) {
	if o == nil || o.Instruction == nil {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *WebConflict) HasInstruction() bool {
	if o != nil && o.Instruction != nil {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given map[string]interface{} and assigns it to the Instruction field.
func (o *WebConflict) SetInstruction(v map[string]interface{}) {
	o.Instruction = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *WebConflict) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebConflict) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *WebConflict) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *WebConflict) SetReason(v string) {
	o.Reason = &v
}

func (o WebConflict) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Instruction != nil {
		toSerialize["instruction"] = o.Instruction
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableWebConflict struct {
	value *WebConflict
	isSet bool
}

func (v NullableWebConflict) Get() *WebConflict {
	return v.value
}

func (v *NullableWebConflict) Set(val *WebConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableWebConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableWebConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebConflict(val *WebConflict) *NullableWebConflict {
	return &NullableWebConflict{value: val, isSet: true}
}

func (v NullableWebConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


