/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// AccessDeniedReasonRep struct for AccessDeniedReasonRep
type AccessDeniedReasonRep struct {
	Resources *[]map[string]interface{} `json:"resources,omitempty"`
	NotResources *[]map[string]interface{} `json:"notResources,omitempty"`
	Actions *[]string `json:"actions,omitempty"`
	NotActions *[]string `json:"notActions,omitempty"`
	Effect *string `json:"effect,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
}

// NewAccessDeniedReasonRep instantiates a new AccessDeniedReasonRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessDeniedReasonRep() *AccessDeniedReasonRep {
	this := AccessDeniedReasonRep{}
	return &this
}

// NewAccessDeniedReasonRepWithDefaults instantiates a new AccessDeniedReasonRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessDeniedReasonRepWithDefaults() *AccessDeniedReasonRep {
	this := AccessDeniedReasonRep{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetResources() []map[string]interface{} {
	if o == nil || o.Resources == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetResourcesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []map[string]interface{} and assigns it to the Resources field.
func (o *AccessDeniedReasonRep) SetResources(v []map[string]interface{}) {
	o.Resources = &v
}

// GetNotResources returns the NotResources field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetNotResources() []map[string]interface{} {
	if o == nil || o.NotResources == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.NotResources
}

// GetNotResourcesOk returns a tuple with the NotResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetNotResourcesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.NotResources == nil {
		return nil, false
	}
	return o.NotResources, true
}

// HasNotResources returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasNotResources() bool {
	if o != nil && o.NotResources != nil {
		return true
	}

	return false
}

// SetNotResources gets a reference to the given []map[string]interface{} and assigns it to the NotResources field.
func (o *AccessDeniedReasonRep) SetNotResources(v []map[string]interface{}) {
	o.NotResources = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetActions() []string {
	if o == nil || o.Actions == nil {
		var ret []string
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetActionsOk() (*[]string, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *AccessDeniedReasonRep) SetActions(v []string) {
	o.Actions = &v
}

// GetNotActions returns the NotActions field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetNotActions() []string {
	if o == nil || o.NotActions == nil {
		var ret []string
		return ret
	}
	return *o.NotActions
}

// GetNotActionsOk returns a tuple with the NotActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetNotActionsOk() (*[]string, bool) {
	if o == nil || o.NotActions == nil {
		return nil, false
	}
	return o.NotActions, true
}

// HasNotActions returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasNotActions() bool {
	if o != nil && o.NotActions != nil {
		return true
	}

	return false
}

// SetNotActions gets a reference to the given []string and assigns it to the NotActions field.
func (o *AccessDeniedReasonRep) SetNotActions(v []string) {
	o.NotActions = &v
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetEffect() string {
	if o == nil || o.Effect == nil {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetEffectOk() (*string, bool) {
	if o == nil || o.Effect == nil {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasEffect() bool {
	if o != nil && o.Effect != nil {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *AccessDeniedReasonRep) SetEffect(v string) {
	o.Effect = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *AccessDeniedReasonRep) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDeniedReasonRep) GetRoleNameOk() (*string, bool) {
	if o == nil || o.RoleName == nil {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *AccessDeniedReasonRep) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *AccessDeniedReasonRep) SetRoleName(v string) {
	o.RoleName = &v
}

func (o AccessDeniedReasonRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if o.NotResources != nil {
		toSerialize["notResources"] = o.NotResources
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.NotActions != nil {
		toSerialize["notActions"] = o.NotActions
	}
	if o.Effect != nil {
		toSerialize["effect"] = o.Effect
	}
	if o.RoleName != nil {
		toSerialize["role_name"] = o.RoleName
	}
	return json.Marshal(toSerialize)
}

type NullableAccessDeniedReasonRep struct {
	value *AccessDeniedReasonRep
	isSet bool
}

func (v NullableAccessDeniedReasonRep) Get() *AccessDeniedReasonRep {
	return v.value
}

func (v *NullableAccessDeniedReasonRep) Set(val *AccessDeniedReasonRep) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessDeniedReasonRep) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessDeniedReasonRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessDeniedReasonRep(val *AccessDeniedReasonRep) *NullableAccessDeniedReasonRep {
	return &NullableAccessDeniedReasonRep{value: val, isSet: true}
}

func (v NullableAccessDeniedReasonRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessDeniedReasonRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


