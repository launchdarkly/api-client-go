/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// RolesStatement struct for RolesStatement
type RolesStatement struct {
	Effect *string `json:"Effect,omitempty"`
	Actions *RolesActionList `json:"Actions,omitempty"`
	Resources *RolesResourceList `json:"Resources,omitempty"`
}

// NewRolesStatement instantiates a new RolesStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesStatement() *RolesStatement {
	this := RolesStatement{}
	return &this
}

// NewRolesStatementWithDefaults instantiates a new RolesStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesStatementWithDefaults() *RolesStatement {
	this := RolesStatement{}
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *RolesStatement) GetEffect() string {
	if o == nil || o.Effect == nil {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesStatement) GetEffectOk() (*string, bool) {
	if o == nil || o.Effect == nil {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *RolesStatement) HasEffect() bool {
	if o != nil && o.Effect != nil {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *RolesStatement) SetEffect(v string) {
	o.Effect = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *RolesStatement) GetActions() RolesActionList {
	if o == nil || o.Actions == nil {
		var ret RolesActionList
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesStatement) GetActionsOk() (*RolesActionList, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *RolesStatement) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given RolesActionList and assigns it to the Actions field.
func (o *RolesStatement) SetActions(v RolesActionList) {
	o.Actions = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *RolesStatement) GetResources() RolesResourceList {
	if o == nil || o.Resources == nil {
		var ret RolesResourceList
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesStatement) GetResourcesOk() (*RolesResourceList, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *RolesStatement) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given RolesResourceList and assigns it to the Resources field.
func (o *RolesStatement) SetResources(v RolesResourceList) {
	o.Resources = &v
}

func (o RolesStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effect != nil {
		toSerialize["Effect"] = o.Effect
	}
	if o.Actions != nil {
		toSerialize["Actions"] = o.Actions
	}
	if o.Resources != nil {
		toSerialize["Resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableRolesStatement struct {
	value *RolesStatement
	isSet bool
}

func (v NullableRolesStatement) Get() *RolesStatement {
	return v.value
}

func (v *NullableRolesStatement) Set(val *RolesStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesStatement(val *RolesStatement) *NullableRolesStatement {
	return &NullableRolesStatement{value: val, isSet: true}
}

func (v NullableRolesStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


