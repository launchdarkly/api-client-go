/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// TitleRep struct for TitleRep
type TitleRep struct {
	Subject *SubjectDataRep `json:"subject,omitempty"`
	Member *MemberDataRep `json:"member,omitempty"`
	Token *TokenDataRep `json:"token,omitempty"`
	App *AuthorizedAppDataRep `json:"app,omitempty"`
	TitleVerb *string `json:"titleVerb,omitempty"`
	Title *string `json:"title,omitempty"`
	Target *TargetResourceRep `json:"target,omitempty"`
	Parent *ParentResourceRep `json:"parent,omitempty"`
}

// NewTitleRep instantiates a new TitleRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTitleRep() *TitleRep {
	this := TitleRep{}
	return &this
}

// NewTitleRepWithDefaults instantiates a new TitleRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTitleRepWithDefaults() *TitleRep {
	this := TitleRep{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TitleRep) GetSubject() SubjectDataRep {
	if o == nil || o.Subject == nil {
		var ret SubjectDataRep
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetSubjectOk() (*SubjectDataRep, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TitleRep) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given SubjectDataRep and assigns it to the Subject field.
func (o *TitleRep) SetSubject(v SubjectDataRep) {
	o.Subject = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *TitleRep) GetMember() MemberDataRep {
	if o == nil || o.Member == nil {
		var ret MemberDataRep
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetMemberOk() (*MemberDataRep, bool) {
	if o == nil || o.Member == nil {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *TitleRep) HasMember() bool {
	if o != nil && o.Member != nil {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberDataRep and assigns it to the Member field.
func (o *TitleRep) SetMember(v MemberDataRep) {
	o.Member = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TitleRep) GetToken() TokenDataRep {
	if o == nil || o.Token == nil {
		var ret TokenDataRep
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetTokenOk() (*TokenDataRep, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TitleRep) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given TokenDataRep and assigns it to the Token field.
func (o *TitleRep) SetToken(v TokenDataRep) {
	o.Token = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *TitleRep) GetApp() AuthorizedAppDataRep {
	if o == nil || o.App == nil {
		var ret AuthorizedAppDataRep
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetAppOk() (*AuthorizedAppDataRep, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *TitleRep) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given AuthorizedAppDataRep and assigns it to the App field.
func (o *TitleRep) SetApp(v AuthorizedAppDataRep) {
	o.App = &v
}

// GetTitleVerb returns the TitleVerb field value if set, zero value otherwise.
func (o *TitleRep) GetTitleVerb() string {
	if o == nil || o.TitleVerb == nil {
		var ret string
		return ret
	}
	return *o.TitleVerb
}

// GetTitleVerbOk returns a tuple with the TitleVerb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetTitleVerbOk() (*string, bool) {
	if o == nil || o.TitleVerb == nil {
		return nil, false
	}
	return o.TitleVerb, true
}

// HasTitleVerb returns a boolean if a field has been set.
func (o *TitleRep) HasTitleVerb() bool {
	if o != nil && o.TitleVerb != nil {
		return true
	}

	return false
}

// SetTitleVerb gets a reference to the given string and assigns it to the TitleVerb field.
func (o *TitleRep) SetTitleVerb(v string) {
	o.TitleVerb = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TitleRep) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TitleRep) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TitleRep) SetTitle(v string) {
	o.Title = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *TitleRep) GetTarget() TargetResourceRep {
	if o == nil || o.Target == nil {
		var ret TargetResourceRep
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetTargetOk() (*TargetResourceRep, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *TitleRep) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given TargetResourceRep and assigns it to the Target field.
func (o *TitleRep) SetTarget(v TargetResourceRep) {
	o.Target = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *TitleRep) GetParent() ParentResourceRep {
	if o == nil || o.Parent == nil {
		var ret ParentResourceRep
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleRep) GetParentOk() (*ParentResourceRep, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *TitleRep) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given ParentResourceRep and assigns it to the Parent field.
func (o *TitleRep) SetParent(v ParentResourceRep) {
	o.Parent = &v
}

func (o TitleRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Member != nil {
		toSerialize["member"] = o.Member
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.App != nil {
		toSerialize["app"] = o.App
	}
	if o.TitleVerb != nil {
		toSerialize["titleVerb"] = o.TitleVerb
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	return json.Marshal(toSerialize)
}

type NullableTitleRep struct {
	value *TitleRep
	isSet bool
}

func (v NullableTitleRep) Get() *TitleRep {
	return v.value
}

func (v *NullableTitleRep) Set(val *TitleRep) {
	v.value = val
	v.isSet = true
}

func (v NullableTitleRep) IsSet() bool {
	return v.isSet
}

func (v *NullableTitleRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTitleRep(val *TitleRep) *NullableTitleRep {
	return &NullableTitleRep{value: val, isSet: true}
}

func (v NullableTitleRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTitleRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


