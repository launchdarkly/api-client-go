/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ConfidenceIntervalRep struct for ConfidenceIntervalRep
type ConfidenceIntervalRep struct {
	Upper *float32 `json:"upper,omitempty"`
	Lower *float32 `json:"lower,omitempty"`
}

// NewConfidenceIntervalRep instantiates a new ConfidenceIntervalRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfidenceIntervalRep() *ConfidenceIntervalRep {
	this := ConfidenceIntervalRep{}
	return &this
}

// NewConfidenceIntervalRepWithDefaults instantiates a new ConfidenceIntervalRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfidenceIntervalRepWithDefaults() *ConfidenceIntervalRep {
	this := ConfidenceIntervalRep{}
	return &this
}

// GetUpper returns the Upper field value if set, zero value otherwise.
func (o *ConfidenceIntervalRep) GetUpper() float32 {
	if o == nil || o.Upper == nil {
		var ret float32
		return ret
	}
	return *o.Upper
}

// GetUpperOk returns a tuple with the Upper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfidenceIntervalRep) GetUpperOk() (*float32, bool) {
	if o == nil || o.Upper == nil {
		return nil, false
	}
	return o.Upper, true
}

// HasUpper returns a boolean if a field has been set.
func (o *ConfidenceIntervalRep) HasUpper() bool {
	if o != nil && o.Upper != nil {
		return true
	}

	return false
}

// SetUpper gets a reference to the given float32 and assigns it to the Upper field.
func (o *ConfidenceIntervalRep) SetUpper(v float32) {
	o.Upper = &v
}

// GetLower returns the Lower field value if set, zero value otherwise.
func (o *ConfidenceIntervalRep) GetLower() float32 {
	if o == nil || o.Lower == nil {
		var ret float32
		return ret
	}
	return *o.Lower
}

// GetLowerOk returns a tuple with the Lower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfidenceIntervalRep) GetLowerOk() (*float32, bool) {
	if o == nil || o.Lower == nil {
		return nil, false
	}
	return o.Lower, true
}

// HasLower returns a boolean if a field has been set.
func (o *ConfidenceIntervalRep) HasLower() bool {
	if o != nil && o.Lower != nil {
		return true
	}

	return false
}

// SetLower gets a reference to the given float32 and assigns it to the Lower field.
func (o *ConfidenceIntervalRep) SetLower(v float32) {
	o.Lower = &v
}

func (o ConfidenceIntervalRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Upper != nil {
		toSerialize["upper"] = o.Upper
	}
	if o.Lower != nil {
		toSerialize["lower"] = o.Lower
	}
	return json.Marshal(toSerialize)
}

type NullableConfidenceIntervalRep struct {
	value *ConfidenceIntervalRep
	isSet bool
}

func (v NullableConfidenceIntervalRep) Get() *ConfidenceIntervalRep {
	return v.value
}

func (v *NullableConfidenceIntervalRep) Set(val *ConfidenceIntervalRep) {
	v.value = val
	v.isSet = true
}

func (v NullableConfidenceIntervalRep) IsSet() bool {
	return v.isSet
}

func (v *NullableConfidenceIntervalRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfidenceIntervalRep(val *ConfidenceIntervalRep) *NullableConfidenceIntervalRep {
	return &NullableConfidenceIntervalRep{value: val, isSet: true}
}

func (v NullableConfidenceIntervalRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfidenceIntervalRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


