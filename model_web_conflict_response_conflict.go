/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// WebConflictResponseConflict struct for WebConflictResponseConflict
type WebConflictResponseConflict struct {
	Id *string `json:"_id,omitempty"`
	Reason *string `json:"reason,omitempty"`
	PendingChangeWillFail *bool `json:"pendingChangeWillFail,omitempty"`
}

// NewWebConflictResponseConflict instantiates a new WebConflictResponseConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebConflictResponseConflict() *WebConflictResponseConflict {
	this := WebConflictResponseConflict{}
	return &this
}

// NewWebConflictResponseConflictWithDefaults instantiates a new WebConflictResponseConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebConflictResponseConflictWithDefaults() *WebConflictResponseConflict {
	this := WebConflictResponseConflict{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WebConflictResponseConflict) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebConflictResponseConflict) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WebConflictResponseConflict) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WebConflictResponseConflict) SetId(v string) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *WebConflictResponseConflict) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebConflictResponseConflict) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *WebConflictResponseConflict) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *WebConflictResponseConflict) SetReason(v string) {
	o.Reason = &v
}

// GetPendingChangeWillFail returns the PendingChangeWillFail field value if set, zero value otherwise.
func (o *WebConflictResponseConflict) GetPendingChangeWillFail() bool {
	if o == nil || o.PendingChangeWillFail == nil {
		var ret bool
		return ret
	}
	return *o.PendingChangeWillFail
}

// GetPendingChangeWillFailOk returns a tuple with the PendingChangeWillFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebConflictResponseConflict) GetPendingChangeWillFailOk() (*bool, bool) {
	if o == nil || o.PendingChangeWillFail == nil {
		return nil, false
	}
	return o.PendingChangeWillFail, true
}

// HasPendingChangeWillFail returns a boolean if a field has been set.
func (o *WebConflictResponseConflict) HasPendingChangeWillFail() bool {
	if o != nil && o.PendingChangeWillFail != nil {
		return true
	}

	return false
}

// SetPendingChangeWillFail gets a reference to the given bool and assigns it to the PendingChangeWillFail field.
func (o *WebConflictResponseConflict) SetPendingChangeWillFail(v bool) {
	o.PendingChangeWillFail = &v
}

func (o WebConflictResponseConflict) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["_id"] = o.Id
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.PendingChangeWillFail != nil {
		toSerialize["pendingChangeWillFail"] = o.PendingChangeWillFail
	}
	return json.Marshal(toSerialize)
}

type NullableWebConflictResponseConflict struct {
	value *WebConflictResponseConflict
	isSet bool
}

func (v NullableWebConflictResponseConflict) Get() *WebConflictResponseConflict {
	return v.value
}

func (v *NullableWebConflictResponseConflict) Set(val *WebConflictResponseConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableWebConflictResponseConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableWebConflictResponseConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebConflictResponseConflict(val *WebConflictResponseConflict) *NullableWebConflictResponseConflict {
	return &NullableWebConflictResponseConflict{value: val, isSet: true}
}

func (v NullableWebConflictResponseConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebConflictResponseConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


