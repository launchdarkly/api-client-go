/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ModelsUser struct for ModelsUser
type ModelsUser struct {
	Key *string `json:"key,omitempty"`
	Secondary *string `json:"secondary,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Country *string `json:"country,omitempty"`
	Email *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Avatar *string `json:"avatar,omitempty"`
	Name *string `json:"name,omitempty"`
	Anonymous *bool `json:"anonymous,omitempty"`
	Custom *map[string]interface{} `json:"custom,omitempty"`
	Derived *map[string]ModelsUserDerived `json:"derived,omitempty"`
	PrivateAttrs *[]string `json:"privateAttrs,omitempty"`
}

// NewModelsUser instantiates a new ModelsUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsUser() *ModelsUser {
	this := ModelsUser{}
	return &this
}

// NewModelsUserWithDefaults instantiates a new ModelsUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsUserWithDefaults() *ModelsUser {
	this := ModelsUser{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ModelsUser) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ModelsUser) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ModelsUser) SetKey(v string) {
	o.Key = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *ModelsUser) GetSecondary() string {
	if o == nil || o.Secondary == nil {
		var ret string
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetSecondaryOk() (*string, bool) {
	if o == nil || o.Secondary == nil {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *ModelsUser) HasSecondary() bool {
	if o != nil && o.Secondary != nil {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given string and assigns it to the Secondary field.
func (o *ModelsUser) SetSecondary(v string) {
	o.Secondary = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *ModelsUser) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *ModelsUser) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *ModelsUser) SetIp(v string) {
	o.Ip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ModelsUser) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ModelsUser) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ModelsUser) SetCountry(v string) {
	o.Country = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ModelsUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ModelsUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ModelsUser) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ModelsUser) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ModelsUser) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ModelsUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ModelsUser) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ModelsUser) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ModelsUser) SetLastName(v string) {
	o.LastName = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *ModelsUser) GetAvatar() string {
	if o == nil || o.Avatar == nil {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetAvatarOk() (*string, bool) {
	if o == nil || o.Avatar == nil {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *ModelsUser) HasAvatar() bool {
	if o != nil && o.Avatar != nil {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *ModelsUser) SetAvatar(v string) {
	o.Avatar = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsUser) SetName(v string) {
	o.Name = &v
}

// GetAnonymous returns the Anonymous field value if set, zero value otherwise.
func (o *ModelsUser) GetAnonymous() bool {
	if o == nil || o.Anonymous == nil {
		var ret bool
		return ret
	}
	return *o.Anonymous
}

// GetAnonymousOk returns a tuple with the Anonymous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetAnonymousOk() (*bool, bool) {
	if o == nil || o.Anonymous == nil {
		return nil, false
	}
	return o.Anonymous, true
}

// HasAnonymous returns a boolean if a field has been set.
func (o *ModelsUser) HasAnonymous() bool {
	if o != nil && o.Anonymous != nil {
		return true
	}

	return false
}

// SetAnonymous gets a reference to the given bool and assigns it to the Anonymous field.
func (o *ModelsUser) SetAnonymous(v bool) {
	o.Anonymous = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *ModelsUser) GetCustom() map[string]interface{} {
	if o == nil || o.Custom == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetCustomOk() (*map[string]interface{}, bool) {
	if o == nil || o.Custom == nil {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *ModelsUser) HasCustom() bool {
	if o != nil && o.Custom != nil {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]interface{} and assigns it to the Custom field.
func (o *ModelsUser) SetCustom(v map[string]interface{}) {
	o.Custom = &v
}

// GetDerived returns the Derived field value if set, zero value otherwise.
func (o *ModelsUser) GetDerived() map[string]ModelsUserDerived {
	if o == nil || o.Derived == nil {
		var ret map[string]ModelsUserDerived
		return ret
	}
	return *o.Derived
}

// GetDerivedOk returns a tuple with the Derived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetDerivedOk() (*map[string]ModelsUserDerived, bool) {
	if o == nil || o.Derived == nil {
		return nil, false
	}
	return o.Derived, true
}

// HasDerived returns a boolean if a field has been set.
func (o *ModelsUser) HasDerived() bool {
	if o != nil && o.Derived != nil {
		return true
	}

	return false
}

// SetDerived gets a reference to the given map[string]ModelsUserDerived and assigns it to the Derived field.
func (o *ModelsUser) SetDerived(v map[string]ModelsUserDerived) {
	o.Derived = &v
}

// GetPrivateAttrs returns the PrivateAttrs field value if set, zero value otherwise.
func (o *ModelsUser) GetPrivateAttrs() []string {
	if o == nil || o.PrivateAttrs == nil {
		var ret []string
		return ret
	}
	return *o.PrivateAttrs
}

// GetPrivateAttrsOk returns a tuple with the PrivateAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUser) GetPrivateAttrsOk() (*[]string, bool) {
	if o == nil || o.PrivateAttrs == nil {
		return nil, false
	}
	return o.PrivateAttrs, true
}

// HasPrivateAttrs returns a boolean if a field has been set.
func (o *ModelsUser) HasPrivateAttrs() bool {
	if o != nil && o.PrivateAttrs != nil {
		return true
	}

	return false
}

// SetPrivateAttrs gets a reference to the given []string and assigns it to the PrivateAttrs field.
func (o *ModelsUser) SetPrivateAttrs(v []string) {
	o.PrivateAttrs = &v
}

func (o ModelsUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Secondary != nil {
		toSerialize["secondary"] = o.Secondary
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.Avatar != nil {
		toSerialize["avatar"] = o.Avatar
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Anonymous != nil {
		toSerialize["anonymous"] = o.Anonymous
	}
	if o.Custom != nil {
		toSerialize["custom"] = o.Custom
	}
	if o.Derived != nil {
		toSerialize["derived"] = o.Derived
	}
	if o.PrivateAttrs != nil {
		toSerialize["privateAttrs"] = o.PrivateAttrs
	}
	return json.Marshal(toSerialize)
}

type NullableModelsUser struct {
	value *ModelsUser
	isSet bool
}

func (v NullableModelsUser) Get() *ModelsUser {
	return v.value
}

func (v *NullableModelsUser) Set(val *ModelsUser) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsUser) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsUser(val *ModelsUser) *NullableModelsUser {
	return &NullableModelsUser{value: val, isSet: true}
}

func (v NullableModelsUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


