/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
)

// ExperimentInfoRep struct for ExperimentInfoRep
type ExperimentInfoRep struct {
	BaselineIdx *int32 `json:"baselineIdx,omitempty"`
	Items *[]ExperimentInfoRepItems `json:"items,omitempty"`
}

// NewExperimentInfoRep instantiates a new ExperimentInfoRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentInfoRep() *ExperimentInfoRep {
	this := ExperimentInfoRep{}
	return &this
}

// NewExperimentInfoRepWithDefaults instantiates a new ExperimentInfoRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentInfoRepWithDefaults() *ExperimentInfoRep {
	this := ExperimentInfoRep{}
	return &this
}

// GetBaselineIdx returns the BaselineIdx field value if set, zero value otherwise.
func (o *ExperimentInfoRep) GetBaselineIdx() int32 {
	if o == nil || o.BaselineIdx == nil {
		var ret int32
		return ret
	}
	return *o.BaselineIdx
}

// GetBaselineIdxOk returns a tuple with the BaselineIdx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentInfoRep) GetBaselineIdxOk() (*int32, bool) {
	if o == nil || o.BaselineIdx == nil {
		return nil, false
	}
	return o.BaselineIdx, true
}

// HasBaselineIdx returns a boolean if a field has been set.
func (o *ExperimentInfoRep) HasBaselineIdx() bool {
	if o != nil && o.BaselineIdx != nil {
		return true
	}

	return false
}

// SetBaselineIdx gets a reference to the given int32 and assigns it to the BaselineIdx field.
func (o *ExperimentInfoRep) SetBaselineIdx(v int32) {
	o.BaselineIdx = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ExperimentInfoRep) GetItems() []ExperimentInfoRepItems {
	if o == nil || o.Items == nil {
		var ret []ExperimentInfoRepItems
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentInfoRep) GetItemsOk() (*[]ExperimentInfoRepItems, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ExperimentInfoRep) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ExperimentInfoRepItems and assigns it to the Items field.
func (o *ExperimentInfoRep) SetItems(v []ExperimentInfoRepItems) {
	o.Items = &v
}

func (o ExperimentInfoRep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaselineIdx != nil {
		toSerialize["baselineIdx"] = o.BaselineIdx
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableExperimentInfoRep struct {
	value *ExperimentInfoRep
	isSet bool
}

func (v NullableExperimentInfoRep) Get() *ExperimentInfoRep {
	return v.value
}

func (v *NullableExperimentInfoRep) Set(val *ExperimentInfoRep) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentInfoRep) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentInfoRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentInfoRep(val *ExperimentInfoRep) *NullableExperimentInfoRep {
	return &NullableExperimentInfoRep{value: val, isSet: true}
}

func (v NullableExperimentInfoRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentInfoRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


