/*
LaunchDarkly REST API

Testing FeatureFlagsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_FeatureFlagsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FeatureFlagsApiService CopyFeatureFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.CopyFeatureFlag(context.Background(), projectKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService DeleteFeatureFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string

		httpRes, err := apiClient.FeatureFlagsApi.DeleteFeatureFlag(context.Background(), projectKey, featureFlagKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetExpiringContextTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetExpiringContextTargets(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetExpiringUserTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetExpiringUserTargets(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetFeatureFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetFeatureFlag(context.Background(), projectKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetFeatureFlagStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetFeatureFlagStatus(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetFeatureFlagStatusAcrossEnvironments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetFeatureFlagStatusAcrossEnvironments(context.Background(), projectKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetFeatureFlagStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetFeatureFlagStatuses(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService GetFeatureFlags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.GetFeatureFlags(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService PatchExpiringTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.PatchExpiringTargets(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService PatchExpiringUserTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.PatchExpiringUserTargets(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService PatchFeatureFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.PatchFeatureFlag(context.Background(), projectKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService PostFeatureFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.PostFeatureFlag(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureFlagsApiService PostMigrationSafetyIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var flagKey string
		var environmentKey string

		resp, httpRes, err := apiClient.FeatureFlagsApi.PostMigrationSafetyIssues(context.Background(), projectKey, flagKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
