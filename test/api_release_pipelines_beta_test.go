/*
LaunchDarkly REST API

Testing ReleasePipelinesBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ReleasePipelinesBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReleasePipelinesBetaApiService DeleteReleasePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var pipelineKey string

		httpRes, err := apiClient.ReleasePipelinesBetaApi.DeleteReleasePipeline(context.Background(), projectKey, pipelineKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePipelinesBetaApiService GetAllReleasePipelines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ReleasePipelinesBetaApi.GetAllReleasePipelines(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePipelinesBetaApiService GetAllReleaseProgressionsForReleasePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var pipelineKey string

		resp, httpRes, err := apiClient.ReleasePipelinesBetaApi.GetAllReleaseProgressionsForReleasePipeline(context.Background(), projectKey, pipelineKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePipelinesBetaApiService GetReleasePipelineByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var pipelineKey string

		resp, httpRes, err := apiClient.ReleasePipelinesBetaApi.GetReleasePipelineByKey(context.Background(), projectKey, pipelineKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePipelinesBetaApiService PostReleasePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ReleasePipelinesBetaApi.PostReleasePipeline(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePipelinesBetaApiService PutReleasePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var pipelineKey string

		resp, httpRes, err := apiClient.ReleasePipelinesBetaApi.PutReleasePipeline(context.Background(), projectKey, pipelineKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
