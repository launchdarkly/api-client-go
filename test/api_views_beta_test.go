/*
LaunchDarkly REST API

Testing ViewsBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ViewsBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ViewsBetaApiService CreateView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ViewsBetaApi.CreateView(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService DeleteView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string

		httpRes, err := apiClient.ViewsBetaApi.DeleteView(context.Background(), projectKey, viewKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService GetLinkedResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string
		var resourceType string

		resp, httpRes, err := apiClient.ViewsBetaApi.GetLinkedResources(context.Background(), projectKey, viewKey, resourceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService GetLinkedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var resourceType string
		var resourceKey string

		resp, httpRes, err := apiClient.ViewsBetaApi.GetLinkedViews(context.Background(), projectKey, resourceType, resourceKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService GetView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string

		resp, httpRes, err := apiClient.ViewsBetaApi.GetView(context.Background(), projectKey, viewKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService GetViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ViewsBetaApi.GetViews(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService LinkResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string
		var resourceType string

		resp, httpRes, err := apiClient.ViewsBetaApi.LinkResource(context.Background(), projectKey, viewKey, resourceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService UnlinkResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string
		var resourceType string

		resp, httpRes, err := apiClient.ViewsBetaApi.UnlinkResource(context.Background(), projectKey, viewKey, resourceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ViewsBetaApiService UpdateView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var viewKey string

		resp, httpRes, err := apiClient.ViewsBetaApi.UpdateView(context.Background(), projectKey, viewKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
