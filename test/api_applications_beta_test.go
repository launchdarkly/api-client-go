/*
LaunchDarkly REST API

Testing ApplicationsBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ApplicationsBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationsBetaApiService DeleteApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string

		httpRes, err := apiClient.ApplicationsBetaApi.DeleteApplication(context.Background(), applicationKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService DeleteApplicationVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string
		var versionKey string

		httpRes, err := apiClient.ApplicationsBetaApi.DeleteApplicationVersion(context.Background(), applicationKey, versionKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService GetApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string

		resp, httpRes, err := apiClient.ApplicationsBetaApi.GetApplication(context.Background(), applicationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService GetApplicationVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string

		resp, httpRes, err := apiClient.ApplicationsBetaApi.GetApplicationVersions(context.Background(), applicationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService GetApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationsBetaApi.GetApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService PatchApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string

		resp, httpRes, err := apiClient.ApplicationsBetaApi.PatchApplication(context.Background(), applicationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsBetaApiService PatchApplicationVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationKey string
		var versionKey string

		resp, httpRes, err := apiClient.ApplicationsBetaApi.PatchApplicationVersion(context.Background(), applicationKey, versionKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
