/*
LaunchDarkly REST API

Testing ProjectsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ProjectsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectsApiService DeleteProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectsApi.DeleteProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService GetFlagDefaultsByProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectsApi.GetFlagDefaultsByProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService GetProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectsApi.GetProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService GetProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsApi.GetProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService PatchFlagDefaultsByProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectsApi.PatchFlagDefaultsByProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService PatchProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectsApi.PatchProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService PostProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsApi.PostProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService PutFlagDefaultsByProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectsApi.PutFlagDefaultsByProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
