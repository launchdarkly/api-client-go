/*
LaunchDarkly REST API

Testing AIConfigsBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_AIConfigsBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AIConfigsBetaApiService DeleteAIConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		httpRes, err := apiClient.AIConfigsBetaApi.DeleteAIConfig(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService DeleteAIConfigVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string
		var variationKey string

		httpRes, err := apiClient.AIConfigsBetaApi.DeleteAIConfigVariation(context.Background(), projectKey, configKey, variationKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService DeleteAITool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var toolKey string

		httpRes, err := apiClient.AIConfigsBetaApi.DeleteAITool(context.Background(), projectKey, toolKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService DeleteModelConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var modelConfigKey string

		httpRes, err := apiClient.AIConfigsBetaApi.DeleteModelConfig(context.Background(), projectKey, modelConfigKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService DeleteRestrictedModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		httpRes, err := apiClient.AIConfigsBetaApi.DeleteRestrictedModels(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfig(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfigMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfigMetrics(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfigMetricsByVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfigMetricsByVariation(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfigTargeting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfigTargeting(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfigVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string
		var variationKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfigVariation(context.Background(), projectKey, configKey, variationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAIConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAIConfigs(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetAITool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var toolKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetAITool(context.Background(), projectKey, toolKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService GetModelConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var modelConfigKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.GetModelConfig(context.Background(), projectKey, modelConfigKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService ListAIToolVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var toolKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.ListAIToolVersions(context.Background(), projectKey, toolKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService ListAITools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.ListAITools(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService ListModelConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.ListModelConfigs(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PatchAIConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PatchAIConfig(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PatchAIConfigTargeting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PatchAIConfigTargeting(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PatchAIConfigVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string
		var variationKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PatchAIConfigVariation(context.Background(), projectKey, configKey, variationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PatchAITool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var toolKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PatchAITool(context.Background(), projectKey, toolKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PostAIConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PostAIConfig(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PostAIConfigVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var configKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PostAIConfigVariation(context.Background(), projectKey, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PostAITool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PostAITool(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PostModelConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PostModelConfig(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AIConfigsBetaApiService PostRestrictedModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AIConfigsBetaApi.PostRestrictedModels(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
