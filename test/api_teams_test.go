/*
LaunchDarkly REST API

Testing TeamsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_TeamsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TeamsApiService DeleteTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		httpRes, err := apiClient.TeamsApi.DeleteTeam(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService GetTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		resp, httpRes, err := apiClient.TeamsApi.GetTeam(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService GetTeamMaintainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		resp, httpRes, err := apiClient.TeamsApi.GetTeamMaintainers(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService GetTeamRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		resp, httpRes, err := apiClient.TeamsApi.GetTeamRoles(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService GetTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TeamsApi.GetTeams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService PatchTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		resp, httpRes, err := apiClient.TeamsApi.PatchTeam(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService PostTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TeamsApi.PostTeam(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamsApiService PostTeamMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamKey string

		resp, httpRes, err := apiClient.TeamsApi.PostTeamMembers(context.Background(), teamKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
