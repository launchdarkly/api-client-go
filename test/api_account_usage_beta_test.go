/*
LaunchDarkly REST API

Testing AccountUsageBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_AccountUsageBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountUsageBetaApiService GetContextsClientsideUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetContextsClientsideUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetContextsServersideUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetContextsServersideUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetContextsTotalUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetContextsTotalUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetDataExportEventsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetDataExportEventsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetEvaluationsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var featureFlagKey string

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetEvaluationsUsage(context.Background(), projectKey, environmentKey, featureFlagKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetEventsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetEventsUsage(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetExperimentationEventsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetExperimentationEventsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetExperimentationKeysUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetExperimentationKeysUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetMauSdksByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetMauSdksByType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetMauUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetMauUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetMauUsageByCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetMauUsageByCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetObservabilityErrorsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetObservabilityErrorsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetObservabilityLogsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetObservabilityLogsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetObservabilitySessionsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetObservabilitySessionsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetObservabilityTracesUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetObservabilityTracesUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetServiceConnectionsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetServiceConnectionsUsage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetStreamUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var source string

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetStreamUsage(context.Background(), source).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetStreamUsageBySdkVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var source string

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetStreamUsageBySdkVersion(context.Background(), source).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountUsageBetaApiService GetStreamUsageSdkversion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var source string

		resp, httpRes, err := apiClient.AccountUsageBetaApi.GetStreamUsageSdkversion(context.Background(), source).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
