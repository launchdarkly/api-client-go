/*
LaunchDarkly REST API

Testing InsightsScoresBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_InsightsScoresBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InsightsScoresBetaApiService CreateInsightGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InsightsScoresBetaApi.CreateInsightGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsScoresBetaApiService DeleteInsightGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var insightGroupKey string

		httpRes, err := apiClient.InsightsScoresBetaApi.DeleteInsightGroup(context.Background(), insightGroupKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsScoresBetaApiService GetInsightGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var insightGroupKey string

		resp, httpRes, err := apiClient.InsightsScoresBetaApi.GetInsightGroup(context.Background(), insightGroupKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsScoresBetaApiService GetInsightGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InsightsScoresBetaApi.GetInsightGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsScoresBetaApiService GetInsightsScores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InsightsScoresBetaApi.GetInsightsScores(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsScoresBetaApiService PatchInsightGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var insightGroupKey string

		resp, httpRes, err := apiClient.InsightsScoresBetaApi.PatchInsightGroup(context.Background(), insightGroupKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
