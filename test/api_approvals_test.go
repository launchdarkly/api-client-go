/*
LaunchDarkly REST API

Testing ApprovalsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ApprovalsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApprovalsApiService DeleteApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ApprovalsApi.DeleteApprovalRequest(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService DeleteApprovalRequestForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string
		var id string

		httpRes, err := apiClient.ApprovalsApi.DeleteApprovalRequestForFlag(context.Background(), projectKey, featureFlagKey, environmentKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService GetApprovalForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string
		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.GetApprovalForFlag(context.Background(), projectKey, featureFlagKey, environmentKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService GetApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.GetApprovalRequest(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService GetApprovalRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApprovalsApi.GetApprovalRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService GetApprovalsForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ApprovalsApi.GetApprovalsForFlag(context.Background(), projectKey, featureFlagKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequestApply", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequestApply(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequestApplyForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string
		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequestApplyForFlag(context.Background(), projectKey, featureFlagKey, environmentKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequestForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequestForFlag(context.Background(), projectKey, featureFlagKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequestReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequestReview(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostApprovalRequestReviewForFlag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string
		var id string

		resp, httpRes, err := apiClient.ApprovalsApi.PostApprovalRequestReviewForFlag(context.Background(), projectKey, featureFlagKey, environmentKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsApiService PostFlagCopyConfigApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ApprovalsApi.PostFlagCopyConfigApprovalRequest(context.Background(), projectKey, featureFlagKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
