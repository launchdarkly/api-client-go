/*
LaunchDarkly REST API

Testing IntegrationDeliveryConfigurationsBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_IntegrationDeliveryConfigurationsBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService CreateIntegrationDeliveryConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var integrationKey string

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.CreateIntegrationDeliveryConfiguration(context.Background(), projectKey, environmentKey, integrationKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService DeleteIntegrationDeliveryConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var integrationKey string
		var id string

		httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.DeleteIntegrationDeliveryConfiguration(context.Background(), projectKey, environmentKey, integrationKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService GetIntegrationDeliveryConfigurationByEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.GetIntegrationDeliveryConfigurationByEnvironment(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService GetIntegrationDeliveryConfigurationById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var integrationKey string
		var id string

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.GetIntegrationDeliveryConfigurationById(context.Background(), projectKey, environmentKey, integrationKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService GetIntegrationDeliveryConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.GetIntegrationDeliveryConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService PatchIntegrationDeliveryConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var integrationKey string
		var id string

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.PatchIntegrationDeliveryConfiguration(context.Background(), projectKey, environmentKey, integrationKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationDeliveryConfigurationsBetaApiService ValidateIntegrationDeliveryConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var integrationKey string
		var id string

		resp, httpRes, err := apiClient.IntegrationDeliveryConfigurationsBetaApi.ValidateIntegrationDeliveryConfiguration(context.Background(), projectKey, environmentKey, integrationKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
