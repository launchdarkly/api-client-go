/*
LaunchDarkly REST API

Testing CodeReferencesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_CodeReferencesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CodeReferencesApiService DeleteBranches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		httpRes, err := apiClient.CodeReferencesApi.DeleteBranches(context.Background(), repo).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService DeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		httpRes, err := apiClient.CodeReferencesApi.DeleteRepository(context.Background(), repo).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string
		var branch string

		resp, httpRes, err := apiClient.CodeReferencesApi.GetBranch(context.Background(), repo, branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetBranches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.CodeReferencesApi.GetBranches(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetExtinctions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CodeReferencesApi.GetExtinctions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CodeReferencesApi.GetRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.CodeReferencesApi.GetRepository(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetRootStatistic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CodeReferencesApi.GetRootStatistic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService GetStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.CodeReferencesApi.GetStatistics(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService PatchRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.CodeReferencesApi.PatchRepository(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService PostExtinction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string
		var branch string

		httpRes, err := apiClient.CodeReferencesApi.PostExtinction(context.Background(), repo, branch).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService PostRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CodeReferencesApi.PostRepository(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CodeReferencesApiService PutBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string
		var branch string

		httpRes, err := apiClient.CodeReferencesApi.PutBranch(context.Background(), repo, branch).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
