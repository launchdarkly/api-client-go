/*
LaunchDarkly REST API

Testing SegmentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_SegmentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SegmentsApiService CreateBigSegmentExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		httpRes, err := apiClient.SegmentsApi.CreateBigSegmentExport(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService CreateBigSegmentImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		httpRes, err := apiClient.SegmentsApi.CreateBigSegmentImport(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService DeleteSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		httpRes, err := apiClient.SegmentsApi.DeleteSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetBigSegmentExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string
		var exportID string

		resp, httpRes, err := apiClient.SegmentsApi.GetBigSegmentExport(context.Background(), projectKey, environmentKey, segmentKey, exportID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetBigSegmentImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string
		var importID string

		resp, httpRes, err := apiClient.SegmentsApi.GetBigSegmentImport(context.Background(), projectKey, environmentKey, segmentKey, importID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetContextInstanceSegmentsMembershipByEnv", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetContextInstanceSegmentsMembershipByEnv(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetExpiringTargetsForSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetExpiringTargetsForSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetExpiringUserTargetsForSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetExpiringUserTargetsForSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetSegmentMembershipForContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string
		var contextKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetSegmentMembershipForContext(context.Background(), projectKey, environmentKey, segmentKey, contextKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetSegmentMembershipForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string
		var userKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetSegmentMembershipForUser(context.Background(), projectKey, environmentKey, segmentKey, userKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService GetSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.GetSegments(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService PatchExpiringTargetsForSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.PatchExpiringTargetsForSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService PatchExpiringUserTargetsForSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.PatchExpiringUserTargetsForSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService PatchSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.PatchSegment(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService PostSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.SegmentsApi.PostSegment(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService UpdateBigSegmentContextTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		httpRes, err := apiClient.SegmentsApi.UpdateBigSegmentContextTargets(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SegmentsApiService UpdateBigSegmentTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var segmentKey string

		httpRes, err := apiClient.SegmentsApi.UpdateBigSegmentTargets(context.Background(), projectKey, environmentKey, segmentKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
