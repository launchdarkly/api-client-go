/*
LaunchDarkly REST API

Testing ApprovalsBetaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ApprovalsBetaApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApprovalsBetaApiService GetApprovalRequestSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ApprovalsBetaApi.GetApprovalRequestSettings(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsBetaApiService PatchApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ApprovalsBetaApi.PatchApprovalRequest(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsBetaApiService PatchApprovalRequestSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ApprovalsBetaApi.PatchApprovalRequestSettings(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApprovalsBetaApiService PatchFlagConfigApprovalRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var featureFlagKey string
		var environmentKey string
		var id string

		resp, httpRes, err := apiClient.ApprovalsBetaApi.PatchFlagConfigApprovalRequest(context.Background(), projectKey, featureFlagKey, environmentKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
