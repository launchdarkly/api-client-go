/*
LaunchDarkly REST API

Testing ContextsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ldapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/launchdarkly/api-client-go"
)

func Test_ldapi_ContextsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContextsApiService DeleteContextInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var id string

		httpRes, err := apiClient.ContextsApi.DeleteContextInstances(context.Background(), projectKey, environmentKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService EvaluateContextInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ContextsApi.EvaluateContextInstance(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService GetContextAttributeNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ContextsApi.GetContextAttributeNames(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService GetContextAttributeValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var attributeName string

		resp, httpRes, err := apiClient.ContextsApi.GetContextAttributeValues(context.Background(), projectKey, environmentKey, attributeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService GetContextInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var id string

		resp, httpRes, err := apiClient.ContextsApi.GetContextInstances(context.Background(), projectKey, environmentKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService GetContextKindsByProjectKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ContextsApi.GetContextKindsByProjectKey(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService GetContexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string
		var kind string
		var key string

		resp, httpRes, err := apiClient.ContextsApi.GetContexts(context.Background(), projectKey, environmentKey, kind, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService PutContextKind", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var key string

		resp, httpRes, err := apiClient.ContextsApi.PutContextKind(context.Background(), projectKey, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService SearchContextInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ContextsApi.SearchContextInstances(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsApiService SearchContexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectKey string
		var environmentKey string

		resp, httpRes, err := apiClient.ContextsApi.SearchContexts(context.Background(), projectKey, environmentKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
