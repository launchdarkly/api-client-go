/*
 * LaunchDarkly REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0
 * Contact: support@launchdarkly.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ldapi

import (
	"encoding/json"
	"time"
)

// UserRecord struct for UserRecord
type UserRecord struct {
	LastPing *time.Time `json:"lastPing,omitempty"`
	EnvironmentId *string `json:"environmentId,omitempty"`
	OwnerId *string `json:"ownerId,omitempty"`
	User *ModelsUser `json:"user,omitempty"`
	SortValue interface{} `json:"sortValue,omitempty"`
}

// NewUserRecord instantiates a new UserRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRecord() *UserRecord {
	this := UserRecord{}
	return &this
}

// NewUserRecordWithDefaults instantiates a new UserRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRecordWithDefaults() *UserRecord {
	this := UserRecord{}
	return &this
}

// GetLastPing returns the LastPing field value if set, zero value otherwise.
func (o *UserRecord) GetLastPing() time.Time {
	if o == nil || o.LastPing == nil {
		var ret time.Time
		return ret
	}
	return *o.LastPing
}

// GetLastPingOk returns a tuple with the LastPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetLastPingOk() (*time.Time, bool) {
	if o == nil || o.LastPing == nil {
		return nil, false
	}
	return o.LastPing, true
}

// HasLastPing returns a boolean if a field has been set.
func (o *UserRecord) HasLastPing() bool {
	if o != nil && o.LastPing != nil {
		return true
	}

	return false
}

// SetLastPing gets a reference to the given time.Time and assigns it to the LastPing field.
func (o *UserRecord) SetLastPing(v time.Time) {
	o.LastPing = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *UserRecord) GetEnvironmentId() string {
	if o == nil || o.EnvironmentId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || o.EnvironmentId == nil {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *UserRecord) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId != nil {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *UserRecord) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *UserRecord) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *UserRecord) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *UserRecord) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserRecord) GetUser() ModelsUser {
	if o == nil || o.User == nil {
		var ret ModelsUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetUserOk() (*ModelsUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserRecord) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ModelsUser and assigns it to the User field.
func (o *UserRecord) SetUser(v ModelsUser) {
	o.User = &v
}

// GetSortValue returns the SortValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRecord) GetSortValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.SortValue
}

// GetSortValueOk returns a tuple with the SortValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRecord) GetSortValueOk() (*interface{}, bool) {
	if o == nil || o.SortValue == nil {
		return nil, false
	}
	return &o.SortValue, true
}

// HasSortValue returns a boolean if a field has been set.
func (o *UserRecord) HasSortValue() bool {
	if o != nil && o.SortValue != nil {
		return true
	}

	return false
}

// SetSortValue gets a reference to the given interface{} and assigns it to the SortValue field.
func (o *UserRecord) SetSortValue(v interface{}) {
	o.SortValue = v
}

func (o UserRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastPing != nil {
		toSerialize["lastPing"] = o.LastPing
	}
	if o.EnvironmentId != nil {
		toSerialize["environmentId"] = o.EnvironmentId
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.SortValue != nil {
		toSerialize["sortValue"] = o.SortValue
	}
	return json.Marshal(toSerialize)
}

type NullableUserRecord struct {
	value *UserRecord
	isSet bool
}

func (v NullableUserRecord) Get() *UserRecord {
	return v.value
}

func (v *NullableUserRecord) Set(val *UserRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRecord(val *UserRecord) *NullableUserRecord {
	return &NullableUserRecord{value: val, isSet: true}
}

func (v NullableUserRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


